{"version":3,"sources":["Components/Footer/Footer.js","Components/PillarComponent/PillarComponent.js","Components/PillarText/PillarText.js","Components/Pillars/Pillars.js","Components/PillarComplete/PillarComplete.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","PillarComponent","_ref","id","name","onClick","active","className","PillarText","text","Pillars","PillarComplete","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","rectClick","bind","assertThisInitialized","state","SelectedPillar","SelectedPillar2","color","pillarID","activeItem","event","setState","console","log","_this2","map","pillar","i","Components_PillarComponent_PillarComponent","key","Components_PillarText_PillarText","Component","App","Components_PillarComplete_PillarComplete","Components_Footer_Footer","Boolean","window","location","hostname","match","routing","react_router_dom","react_router","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAQeA,eANA,WACf,OACKC,EAAAC,EAAAC,cAAA,gECeUC,SAhBS,SAAAC,GAAkC,IAA/BC,EAA+BD,EAA/BC,GAAIC,EAA2BF,EAA3BE,KAAMC,EAAqBH,EAArBG,QAAqBH,EAAZI,OAG7C,OACKR,EAAAC,EAAAC,cAAA,OAAKO,UAAU,2BACfT,EAAAC,EAAAC,cAAA,UAAKI,GACLN,EAAAC,EAAAC,cAAA,OAAKO,UAAW,YAAaF,QAAS,kBAAMA,EAAQF,SCC3CK,EARI,SAAAN,GAAc,IAAXO,EAAWP,EAAXO,KACrB,OACKX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAIS,KCLGC,EAAU,CAErB,CACEP,GAAI,EACJC,KAAM,eACNK,KAAM,+MAER,CACEN,GAAI,EACJC,KAAM,aACNK,KAAM,qkBAER,CACEN,GAAI,EACJC,KAAM,WACNK,KAAM,ifAER,CACEN,GAAI,EACJC,KAAM,gBACNK,KAAM,uTAEN,CACAN,GAAI,EACJC,KAAM,YACNK,KAAM,wgBAEN,CACAN,GAAI,EACJC,KAAM,MACNK,KAAM,kwBAEN,CACAN,GAAI,EACJC,KAAM,WACNK,KAAM,6dC8BKE,cA3DZ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEOI,UAAYP,EAAKO,UAAUC,KAAfP,OAAAQ,EAAA,EAAAR,CAAAD,IAEnBA,EAAKU,MAAQ,CACXZ,QAASA,EACTa,eAAgB,EACVC,gBAAiB,EAEvBC,MAAO,QACPnB,QAAQ,EACXoB,SAAU,GACVC,YAAY,GAbEf,yEAkBLgB,GAERb,KAAKc,SAAS,CAGdN,eAAgBK,EAAOD,YAAY,GAAQ,WAC/CG,QAAQC,IAAIhB,KAAKS,oDAMN,IAAAQ,EAAAjB,KAEP,OACEjB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACfT,EAAAC,EAAAC,cAAA,4FACAF,EAAAC,EAAAC,cAAA,OAAKO,UAAU,gBACdQ,KAAKO,MAAMZ,QAAQuB,IAAI,SAACC,EAAQC,GACjC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,CACP/B,QAAS2B,EAAKb,UACdkB,IAAKL,EAAKV,MAAMZ,QAAQyB,GAAGhC,GAC3BA,GAAI6B,EAAKV,MAAMZ,QAAQyB,GAAGhC,GAC1BC,KAAM4B,EAAKV,MAAMZ,QAAQyB,GAAG/B,KAC5BE,OAAQ0B,EAAKV,MAAMK,eAQvB7B,EAAAC,EAAAC,cAACsC,EAAD,CAAY7B,KAAMM,KAAKO,MAAMZ,QAASK,KAAKO,MAAMC,eAAe,GAAId,gBAnDzC8B,aCoBdC,gMAfX,OACE1C,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OAETT,EAAAC,EAAAC,cAACyC,EAAD,MAEN3C,EAAAC,EAAAC,cAAA,OAAKO,UAAU,UACbT,EAAAC,EAAAC,cAAC0C,EAAD,eATUH,cCKEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EACJlD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACEnD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWZ,MAIjCa,IAASC,OAAON,EAASO,SAASC,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9f1c16bd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Footer.css'\r\nconst Footer = () => {\r\nreturn (\r\n     <footer>Av Mathias Grading & Jardar Sørlie</footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './PillarComponent.css';\r\n\r\nconst PillarComponent = ({ id, name, onClick, active}) => {\r\n\r\n\t\r\n\treturn (\r\n\t     <div className=\"tc dib br3 pa3 bw2 grow\">\r\n\t     <h4>{name}</h4>\r\n\t     <div className={\"rectangle\"} onClick={() => onClick(id) }>\r\n      </div>\r\n\t     </div>\r\n      \r\n\r\n\t);\r\n\r\n\t \r\n}\r\n\r\nexport default PillarComponent;","import React from 'react';\r\n\r\nconst PillarText = ({ text }) => {\r\n\treturn (\r\n\t     <div>\r\n\t     <p>{text}</p>\r\n\t     </div>\r\n\t);\r\n}\r\n\r\nexport default PillarText;","export const Pillars = [\r\n  \r\n  {\r\n    id: 1,\r\n    name: 'Skalerbarhet',\r\n    text: 'Skalerbarhetssøylen tar opp de dynamisk tekniske forretningsbehovene ved en fog etablering. De hierarkiske egenskapene til fog og dens plassering ved kanten av nettverk gir flere skalering muligheter.',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Åpenhet',\r\n    text: 'Åpenhet er viktig for suksessen til et allerede eksisterende fog computing økosystem for IoT plattformer og applikasjoner. Enkeltleverandør løsninger kan føre til begrenset leverandørdiversitet, noe som kan ha en negativ effekt på systemkostnad, kvalitet og innovasjon. Åpenhet som et grunnleggende prinsipp gjør at fog noder kan eksistere hvor som helst i et nettverk og i en samlet gruppe med nettverk. Denne åpenheten gjør det mulig for nye software definerte fog noder til å bli dynamisk opprettet for å løse en forretningsoppgave.',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Autonomi',\r\n    text: 'Autonomisøylen gir mulighet for at Fog nodene kan fortsette å levere funksjonalitet selv om eksterne tjenester svikter. Autonomi er støttet gjennom hele hierarkiet. Beslutningstaking vil bli utført på alle nivåer på en ferdig tjeneste som på enheten eller alle overordnede lag. Autonomi på kanten av nettverket betyr at enheter og innsamlet data kan bli beregnet der det gir mest mening. Trengs dataen og prosesseres raskt kan dette gjøres langs nettverkskanten. ',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Programmerbar',\r\n    text: 'Programmerbar søyle muliggjør svært adaptive implementeringer, inkludert støtte for programmering i programvare og maskinvare lag. Dette betyr at man kan skrive om oppgavene til en fog node eller gruppe med fog noder for å kunne imøtekomme operativ dynamikk, og fullstendig automatisering.',\r\n  },\r\n    {\r\n    id: 5,\r\n    name: 'Smidighet',\r\n    text: 'Smidighetssøylen retter seg mot forretningsmessige beslutninger ved en distribusjon av OpenFog referanse arkitektur. Det er ikke mulig for mennesker alene å analysere dataene som blir generert på skalaen spådd av IoT som grunnlag for rask, forretnings- og operasjonelle beslutninger. Smidighetssøylen fokuserer på å transformere dette volumet av data til handlingsbar innsikt. Det skal også håndtere fog distribusjonens høyt dynamiske natur og behov for å reagere raskt på endring',\r\n  },\r\n    {\r\n    id: 6,\r\n    name: 'RAS',\r\n    text: 'pålitelighet, tilgjengelighet og brukbarhet (RAS) eksisterer gjennom enhver suksessrik systemarkitektur, og har stor viktighet i OpenFog arkitekturen. Maskinvare, programvare og operasjoner er de tre hovedområdene i RAS søylen. En pålitelig distribusjon vil fortsette å levere designet funksjonalitet både under vanlige og varierte omstendigheter. Pålitelighetsdelen av RAS søylen inkluderer en del krav. Det er viktig at maskinvaren er pålitelig, så programvaren kan være pålitelig sammen med Fog nettverket. Dette kan måles med å regne uptime. Den skal beskytte tilgjengeligheten og integriteten av data og utføre beregninger på gateways langs kanten med bruk av forbedret maskinvare, programvare og nettverksdesign.',\r\n  },\r\n    {\r\n    id: 7,\r\n    name: 'Hierarki',\r\n    text: 'Beregnings- og systemhierarki er ikke nødvendig for alle OpenFog arkitekturer, men det er fortsatt brukt i de fleste distribusjoner. OpenFog RA data ressurser kan ses på som et logisk hierarki basert på funksjonskravene til et end-to-end IoT system. Avhengig av omfanget og scenariet som tas opp, kan hierarkiet være et nettverk av smarte og tilkoblede partisjonerte systemer arrangert i et fysisk eller logisk lag, eller kollapse til et enkelt fysisk system. ',\r\n  }\r\n];\r\n","import React, { Component } from 'react';\r\nimport PillarComponent from '../PillarComponent/PillarComponent';\r\nimport PillarText from '../PillarText/PillarText';\r\nimport {Pillars} from '../Pillars/Pillars';\r\n\r\nclass PillarComplete extends Component {\r\n\t  constructor() {\r\n    super()\r\n\r\n      this.rectClick = this.rectClick.bind(this);\r\n\r\n    this.state = {\r\n      Pillars: Pillars,\r\n      SelectedPillar: 1,\r\n            SelectedPillar2: 1,\r\n\r\n      color: 'white',\r\n      active: false,\r\n\t  pillarID: '',\r\n\t  activeItem: false \r\n\r\n    }\r\n  }\r\n\r\n  rectClick(event) {\r\n  \r\n    this.setState({\r\n    \r\n\r\n    SelectedPillar: event, activeItem: true }, function () {\r\nconsole.log(this.SelectedPillar2)   \r\n\r\n});\r\n\r\n  }\r\n\r\n \trender() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n      <h1>OpenFogConsortium sine syv søyler som beskriver en fog computing arkitektur</h1>\r\n     \t<div className=\"content-wrap\">\r\n      {this.state.Pillars.map((pillar, i)=> {\r\n      return <PillarComponent \r\n      onClick={this.rectClick} \r\n      key={this.state.Pillars[i].id} \r\n      id={this.state.Pillars[i].id} \r\n      name={this.state.Pillars[i].name} \r\n      active={this.state.activeItem}\r\n/>\r\n\r\n    }\r\n    )\r\n  }\r\n\r\n\r\n  <PillarText text={this.state.Pillars[(this.state.SelectedPillar-1)].text}/>\r\n        </div>\r\n        \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PillarComplete;","import React, { Component } from 'react';\nimport Navigation from './Components/Navigation/Navigation';\nimport Footer from './Components/Footer/Footer';\nimport PillarComplete from './Components/PillarComplete/PillarComplete';\n\nimport 'tachyons';\nimport './App.css';\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\"> \n      {/*<Navigation />*/}\n            <PillarComplete />\n\n      <div className=\"Footer\"> \n        <Footer/>\n\n        </div>\n\n      </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Navigation from './Components/Navigation/Navigation';\nimport Footer from './Components/Footer/Footer';\nimport PillarComplete from './Components/PillarComplete/PillarComplete';\n\nconst routing = (\n  <Router>\n    <div>\n      <Route path=\"/\" component={App} />\n    </div>\n  </Router>\n)\nReactDOM.render(routing, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}